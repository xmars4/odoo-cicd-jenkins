version: "3"
services:
    jenkins:
        image: jenkins
        build:
            dockerfile: Dockerfile
        container_name: jenkins
        ports:
            - "8080:8080"
            - "50000:50000"
        networks:
            - jenkins
        volumes:
            # we used bind mount instead of volume as a workaround
            # when create a container through jenkins (inside a container)
            - /var/jenkins_home:/var/jenkins_home
            # allow jenkin instance running inside a container can execute docker command
            # two methods: dind and dood -> in this case, we used dood
            # + mount docker socket from host machine to container
            # + add docker cli (already define in Dockerfile)
            - /var/run/docker.sock:/var/run/docker.sock
        restart: always

    postgres:
        image: postgres:16
        networks:
            - jenkins
        environment:
            POSTGRES_USER: sonar
            POSTGRES_PASSWORD: sonarpasswd
        volumes:
            - postgres-data:/var/lib/postgresql/data
        restart: always

    sonarqube:
        image: sonarqube:lts
        ports:
            - "9000:9000"
            - "9092:9092"
        networks:
            - jenkins
        environment:
            SONARQUBE_JDBC_USERNAME: sonar
            SONARQUBE_JDBC_PASSWORD: sonarpasswd
            SONARQUBE_JDBC_URL: "jdbc:postgresql://postgres:5432/sonar"
        depends_on:
            - postgres
        restart: always

networks:
    jenkins:
volumes:
    postgres-data:
